name: Lint -> Test -> Build -> Push

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Running Linter
        run: |
          make lint
      - name: Test
        run: |
          make test
          make test > pytest-coverage.txt

      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2

  build-and-push:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --tags

      - name: Generate Tag
        id: tag_generator
        run: |
           # Strip git ref prefix from version
            if [[ "$GITHUB_REF_NAME" == "master" ]]; then
              BRANCH="MS"
            else
              BRANCH="BR"
            fi

            # Get current date
            DATE=$(date +%Y-%m-%d)

            # Use GITHUB running build number
            REVISION_NUMBER=$GITHUB_RUN_NUMBER

            # Use this to determine the version string
            NEW_TAG="${DATE}_${REVISION_NUMBER}-${BRANCH}"

            # Push a new tag back to the repository
            git tag $NEW_TAG
            git push origin $NEW_TAG

            # Set the new tag as output of this step
            echo "tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Build the Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/checkpoint-placer:${{ steps.tag_generator.outputs.tag }} .

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/checkpoint-placer:${{ steps.tag_generator.outputs.tag }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_generator.outputs.tag }}
          release_name: Release ${{ steps.tag_generator.outputs.tag }}
          draft: false
